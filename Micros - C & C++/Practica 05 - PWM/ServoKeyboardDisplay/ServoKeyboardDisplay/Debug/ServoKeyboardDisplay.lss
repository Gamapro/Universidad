
ServoKeyboardDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000733  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000629  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001767  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 93 00 	call	0x126	; 0x126 <main>
  7a:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <hastaTecla>:
	{0x1, 0x2, 0x3, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};

uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
  82:	30 e0       	ldi	r19, 0x00	; 0
		PORTX = ~(1 << i);
  84:	43 2f       	mov	r20, r19
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	03 2e       	mov	r0, r19
  8e:	02 c0       	rjmp	.+4      	; 0x94 <hastaTecla+0x12>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <hastaTecla+0xe>
  98:	80 95       	com	r24
  9a:	8b bb       	out	0x1b, r24	; 27
		asm("nop");
  9c:	00 00       	nop
		asm("nop");
  9e:	00 00       	nop
		for(uint8_t j = 4; j < 8; j++){
  a0:	24 e0       	ldi	r18, 0x04	; 4
  a2:	3c c0       	rjmp	.+120    	; 0x11c <hastaTecla+0x9a>
			if(isClear(PINX, j)){
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	62 2f       	mov	r22, r18
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 2e       	mov	r0, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <hastaTecla+0x32>
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <hastaTecla+0x2e>
  b8:	80 fd       	sbrc	r24, 0
  ba:	2f c0       	rjmp	.+94     	; 0x11a <hastaTecla+0x98>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f e7       	ldi	r18, 0x7F	; 127
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <hastaTecla+0x40>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <hastaTecla+0x4a>
  cc:	00 00       	nop
				_delay_ms(100);
				while(isClear(PINX, j));
  ce:	89 b3       	in	r24, 0x19	; 25
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	06 2e       	mov	r0, r22
  d4:	02 c0       	rjmp	.+4      	; 0xda <hastaTecla+0x58>
  d6:	95 95       	asr	r25
  d8:	87 95       	ror	r24
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <hastaTecla+0x54>
  de:	80 ff       	sbrs	r24, 0
  e0:	f6 cf       	rjmp	.-20     	; 0xce <hastaTecla+0x4c>
  e2:	2f e7       	ldi	r18, 0x7F	; 127
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <hastaTecla+0x66>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <hastaTecla+0x70>
  f2:	00 00       	nop
				_delay_ms(100);
				return keyboard[7 - j][3 - i];
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	86 1b       	sub	r24, r22
  fa:	97 0b       	sbc	r25, r23
  fc:	23 e0       	ldi	r18, 0x03	; 3
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	24 1b       	sub	r18, r20
 102:	35 0b       	sbc	r19, r21
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	80 5a       	subi	r24, 0xA0	; 160
 10e:	9f 4f       	sbci	r25, 0xFF	; 255
 110:	fc 01       	movw	r30, r24
 112:	e2 0f       	add	r30, r18
 114:	f3 1f       	adc	r31, r19
 116:	80 81       	ld	r24, Z
 118:	08 95       	ret
uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
		PORTX = ~(1 << i);
		asm("nop");
		asm("nop");
		for(uint8_t j = 4; j < 8; j++){
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	28 30       	cpi	r18, 0x08	; 8
 11e:	10 f2       	brcs	.-124    	; 0xa4 <hastaTecla+0x22>
	{0x1, 0x2, 0x3, 0xC},
	{0xE, 0x0, 0xF, 0xD}
};

uint8_t hastaTecla(){
	for(uint8_t i = 0;; i++, i %= 4){
 120:	3f 5f       	subi	r19, 0xFF	; 255
 122:	33 70       	andi	r19, 0x03	; 3
				while(isClear(PINX, j));
				_delay_ms(100);
				return keyboard[7 - j][3 - i];
			}
		}
	}
 124:	af cf       	rjmp	.-162    	; 0x84 <hastaTecla+0x2>

00000126 <main>:
}

int main(){
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	2a 97       	sbiw	r28, 0x0a	; 10
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	DDRX = 0x0F;
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	8a bb       	out	0x1a, r24	; 26
	PORTX = DDRC = DDRB = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	87 bb       	out	0x17, r24	; 23
 142:	84 bb       	out	0x14, r24	; 20
 144:	8b bb       	out	0x1b, r24	; 27
	uint8_t arr[10] = {5,8,11,15,19,23,27,31,35,38};
 146:	8a e0       	ldi	r24, 0x0A	; 10
 148:	e0 e7       	ldi	r30, 0x70	; 112
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	de 01       	movw	r26, r28
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	8a 95       	dec	r24
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x2a>
	uint8_t tecla, cont = 0;
	TCNT0 = 0, OCR0 = arr[0], TCCR0 = 0b01101100;
 158:	12 be       	out	0x32, r1	; 50
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	8c bf       	out	0x3c, r24	; 60
 15e:	8c e6       	ldi	r24, 0x6C	; 108
 160:	83 bf       	out	0x33, r24	; 51

int main(){
	DDRX = 0x0F;
	PORTX = DDRC = DDRB = 0xFF;
	uint8_t arr[10] = {5,8,11,15,19,23,27,31,35,38};
	uint8_t tecla, cont = 0;
 162:	10 e0       	ldi	r17, 0x00	; 0
	TCNT0 = 0, OCR0 = arr[0], TCCR0 = 0b01101100;
	for(;;){
		PORTC = reverse(cont) >> 2;
 164:	21 2f       	mov	r18, r17
 166:	2a 7a       	andi	r18, 0xAA	; 170
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	35 95       	asr	r19
 16c:	27 95       	ror	r18
 16e:	81 2f       	mov	r24, r17
 170:	85 75       	andi	r24, 0x55	; 85
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	28 2b       	or	r18, r24
 17a:	39 2b       	or	r19, r25
 17c:	c9 01       	movw	r24, r18
 17e:	8c 7c       	andi	r24, 0xCC	; 204
 180:	99 27       	eor	r25, r25
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
 186:	95 95       	asr	r25
 188:	87 95       	ror	r24
 18a:	23 73       	andi	r18, 0x33	; 51
 18c:	33 27       	eor	r19, r19
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	82 2b       	or	r24, r18
 198:	93 2b       	or	r25, r19
 19a:	9c 01       	movw	r18, r24
 19c:	22 95       	swap	r18
 19e:	32 95       	swap	r19
 1a0:	30 7f       	andi	r19, 0xF0	; 240
 1a2:	32 27       	eor	r19, r18
 1a4:	20 7f       	andi	r18, 0xF0	; 240
 1a6:	32 27       	eor	r19, r18
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	95 95       	asr	r25
 1b6:	87 95       	ror	r24
 1b8:	82 2b       	or	r24, r18
 1ba:	93 2b       	or	r25, r19
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	95 95       	asr	r25
 1c2:	87 95       	ror	r24
 1c4:	85 bb       	out	0x15, r24	; 21
		tecla = hastaTecla();
 1c6:	0e 94 41 00 	call	0x82	; 0x82 <hastaTecla>
		if(tecla == 0x9 && cont < 9) cont++;
 1ca:	89 30       	cpi	r24, 0x09	; 9
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <main+0xae>
 1ce:	19 30       	cpi	r17, 0x09	; 9
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <main+0xae>
 1d2:	1f 5f       	subi	r17, 0xFF	; 255
		if(tecla == 0x1 && cont > 0) cont--;
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	11 f4       	brne	.+4      	; 0x1dc <main+0xb6>
 1d8:	11 11       	cpse	r17, r1
 1da:	11 50       	subi	r17, 0x01	; 1
		if(tecla == 0xD) OCR0 = arr[cont];
 1dc:	8d 30       	cpi	r24, 0x0D	; 13
 1de:	11 f6       	brne	.-124    	; 0x164 <main+0x3e>
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e1 0f       	add	r30, r17
 1ea:	f1 1d       	adc	r31, r1
 1ec:	80 81       	ld	r24, Z
 1ee:	8c bf       	out	0x3c, r24	; 60
 1f0:	b9 cf       	rjmp	.-142    	; 0x164 <main+0x3e>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
