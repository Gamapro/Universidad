
Arcos Bravo - LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  00000169  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  000004db  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001318  00000000  00000000  0000054b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006da  00000000  00000000  00001863  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004e8  00000000  00000000  00001f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e4  00000000  00000000  00002428  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e7  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000054e  00000000  00000000  000026f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000003f4  000003f4  000004a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.cero_en_bit 00000018  000003ae  000003ae  00000462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.uno_en_bit 00000016  000003de  000003de  00000492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.saca_uno 00000018  000003c6  000003c6  0000047a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.saca_cero 0000001a  00000394  00000394  00000448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_wr_inst_ini 00000038  000002f4  000002f4  000003a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_wait_flag 000000cc  000000b6  000000b6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_wr_char 00000088  00000182  00000182  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_wr_string 00000034  0000032c  0000032c  000003e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_wr_instruction 0000007e  0000020a  0000020a  000002be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_init 0000006c  00000288  00000288  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000007  000000ae  000000ae  00000162  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.main    00000034  00000360  00000360  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.proteus  00000001  00800060  00800060  000004ac  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
   8:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
   c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  10:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  14:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  18:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  1c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  20:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  24:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  28:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  2c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  30:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  34:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  38:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  3c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  40:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  44:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  48:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  4c:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>
  50:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d4 e0       	ldi	r29, 0x04	; 4
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 b0 01 	call	0x360	; 0x360 <main>
  a6:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

000003f4 <__bad_interrupt>:
 3f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.cero_en_bit:

000003ae <cero_en_bit>:
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
}


uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (!(*LUGAR&(1<<BIT)));
 3ae:	fc 01       	movw	r30, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <cero_en_bit+0xc>
 3b6:	95 95       	asr	r25
 3b8:	87 95       	ror	r24
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <cero_en_bit+0x8>
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	8f 27       	eor	r24, r31
}
 3c2:	81 70       	andi	r24, 0x01	; 1
 3c4:	08 95       	ret

Disassembly of section .text.uno_en_bit:

000003de <uno_en_bit>:

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT){
	return (*LUGAR&(1<<BIT));
 3de:	fc 01       	movw	r30, r24
 3e0:	20 81       	ld	r18, Z
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <uno_en_bit+0xe>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <uno_en_bit+0xa>
}
 3f0:	82 23       	and	r24, r18
 3f2:	08 95       	ret

Disassembly of section .text.saca_uno:

000003c6 <saca_uno>:
void saca_uno(volatile uint8_t *LUGAR, uint8_t BIT){
	*LUGAR=*LUGAR|(1<<BIT);
 3c6:	fc 01       	movw	r30, r24
 3c8:	40 81       	ld	r20, Z
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <saca_uno+0xe>
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <saca_uno+0xa>
 3d8:	24 2b       	or	r18, r20
 3da:	20 83       	st	Z, r18
 3dc:	08 95       	ret

Disassembly of section .text.saca_cero:

00000394 <saca_cero>:
}

void saca_cero(volatile uint8_t *LUGAR, uint8_t BIT){
 394:	fc 01       	movw	r30, r24
	*LUGAR=*LUGAR&~(1<<BIT);
 396:	90 81       	ld	r25, Z
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <saca_cero+0xe>
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <saca_cero+0xa>
 3a6:	20 95       	com	r18
 3a8:	29 23       	and	r18, r25
 3aa:	20 83       	st	Z, r18
 3ac:	08 95       	ret

Disassembly of section .text.LCD_wr_inst_ini:

000002f4 <LCD_wr_inst_ini>:
	LCD_wait_flag();
	
}

void LCD_wr_inst_ini(uint8_t instruccion){ 
	PORTLCD=instruccion; //Saco el dato y le digo que escribiré un dato
 2f4:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	85 e3       	ldi	r24, 0x35	; 53
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_cero(&PORTLCD,RW);
 300:	65 e0       	ldi	r22, 0x05	; 5
 302:	85 e3       	ldi	r24, 0x35	; 53
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_uno(&PORTLCD,E);
 30a:	66 e0       	ldi	r22, 0x06	; 6
 30c:	85 e3       	ldi	r24, 0x35	; 53
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	83 ec       	ldi	r24, 0xC3	; 195
 316:	99 e0       	ldi	r25, 0x09	; 9
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_wr_inst_ini+0x24>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_wr_inst_ini+0x2a>
 31e:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 320:	66 e0       	ldi	r22, 0x06	; 6
 322:	85 e3       	ldi	r24, 0x35	; 53
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
 32a:	08 95       	ret

Disassembly of section .text.LCD_wait_flag:

000000b6 <LCD_wait_flag>:
}


void LCD_wait_flag(void){
//	_delay_ms(100);
	DDRLCD&=0b11110000; //Para poner el pin BF como entrada para leer la bandera lo demás salida
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	84 bb       	out	0x14, r24	; 20
	saca_cero(&PORTLCD,RS);// Instrucción
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	85 e3       	ldi	r24, 0x35	; 53
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_uno(&PORTLCD,RW); // Leer
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	85 e3       	ldi	r24, 0x35	; 53
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
	while(1){
		saca_uno(&PORTLCD,E); //pregunto por el primer nibble
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	85 e3       	ldi	r24, 0x35	; 53
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
  da:	83 ec       	ldi	r24, 0xC3	; 195
  dc:	99 e0       	ldi	r25, 0x09	; 9
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_wait_flag+0x28>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_wait_flag+0x2e>
  e4:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);	
  e6:	66 e0       	ldi	r22, 0x06	; 6
  e8:	85 e3       	ldi	r24, 0x35	; 53
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
		if(proteus && uno_en_bit(&PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f4:	88 23       	and	r24, r24
  f6:	39 f0       	breq	.+14     	; 0x106 <LCD_wait_flag+0x50>
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	83 e3       	ldi	r24, 0x33	; 51
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 ef 01 	call	0x3de	; 0x3de <uno_en_bit>
 102:	81 11       	cpse	r24, r1
 104:	20 c0       	rjmp	.+64     	; 0x146 <LCD_wait_flag+0x90>
		if(!proteus && cero_en_bit(&PINLCD,BF)) {break;} //uno_en_bit para protues, 0 para la vida real
 106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 10a:	81 11       	cpse	r24, r1
 10c:	07 c0       	rjmp	.+14     	; 0x11c <LCD_wait_flag+0x66>
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	83 e3       	ldi	r24, 0x33	; 51
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 d7 01 	call	0x3ae	; 0x3ae <cero_en_bit>
 118:	81 11       	cpse	r24, r1
 11a:	15 c0       	rjmp	.+42     	; 0x146 <LCD_wait_flag+0x90>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	93 e0       	ldi	r25, 0x03	; 3
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_wait_flag+0x68>
 122:	00 00       	nop
		_delay_us(10);
		saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 124:	66 e0       	ldi	r22, 0x06	; 6
 126:	85 e3       	ldi	r24, 0x35	; 53
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	83 ec       	ldi	r24, 0xC3	; 195
 130:	99 e0       	ldi	r25, 0x09	; 9
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_wait_flag+0x7c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_wait_flag+0x82>
 138:	00 00       	nop
		_delay_ms(10);
		saca_cero(&PORTLCD,E);	
 13a:	66 e0       	ldi	r22, 0x06	; 6
 13c:	85 e3       	ldi	r24, 0x35	; 53
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	}
 144:	c5 cf       	rjmp	.-118    	; 0xd0 <LCD_wait_flag+0x1a>
	saca_uno(&PORTLCD,E); //pregunto por el segundo nibble
 146:	66 e0       	ldi	r22, 0x06	; 6
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
 150:	83 ec       	ldi	r24, 0xC3	; 195
 152:	99 e0       	ldi	r25, 0x09	; 9
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_wait_flag+0x9e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_wait_flag+0xa4>
 15a:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 15c:	66 e0       	ldi	r22, 0x06	; 6
 15e:	85 e3       	ldi	r24, 0x35	; 53
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	//entonces cuando tenga cero puede continuar con esto...
	saca_cero(&PORTLCD,RS);
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	85 e3       	ldi	r24, 0x35	; 53
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_cero(&PORTLCD,RW);
 170:	65 e0       	ldi	r22, 0x05	; 5
 172:	85 e3       	ldi	r24, 0x35	; 53
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	DDRLCD|=(15<<0)|(1<<RS)|(1<<RW)|(1<<E);
 17a:	84 b3       	in	r24, 0x14	; 20
 17c:	8f 67       	ori	r24, 0x7F	; 127
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret

Disassembly of section .text.LCD_wr_char:

00000182 <LCD_wr_char>:
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S	
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
}

void LCD_wr_char(uint8_t data){
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
	//saco la parte más significativa del dato
	PORTLCD=data>>4; //Saco el dato y le digo que escribiré un dato
 186:	82 95       	swap	r24
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	85 bb       	out	0x15, r24	; 21
	saca_uno(&PORTLCD,RS);
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
	saca_cero(&PORTLCD,RW);
 196:	65 e0       	ldi	r22, 0x05	; 5
 198:	85 e3       	ldi	r24, 0x35	; 53
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_uno(&PORTLCD,E);
 1a0:	66 e0       	ldi	r22, 0x06	; 6
 1a2:	85 e3       	ldi	r24, 0x35	; 53
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
 1aa:	83 ec       	ldi	r24, 0xC3	; 195
 1ac:	99 e0       	ldi	r25, 0x09	; 9
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_wr_char+0x2c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCD_wr_char+0x32>
 1b4:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 1b6:	66 e0       	ldi	r22, 0x06	; 6
 1b8:	85 e3       	ldi	r24, 0x35	; 53
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	//saco la parte menos significativa del dato
	PORTLCD=data&0b00001111; //Saco el dato y le digo que escribiré un dato
 1c0:	cf 70       	andi	r28, 0x0F	; 15
 1c2:	c5 bb       	out	0x15, r28	; 21
	saca_uno(&PORTLCD,RS);
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	85 e3       	ldi	r24, 0x35	; 53
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
	saca_cero(&PORTLCD,RW);
 1ce:	65 e0       	ldi	r22, 0x05	; 5
 1d0:	85 e3       	ldi	r24, 0x35	; 53
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_uno(&PORTLCD,E);
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	85 e3       	ldi	r24, 0x35	; 53
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
 1e2:	83 ec       	ldi	r24, 0xC3	; 195
 1e4:	99 e0       	ldi	r25, 0x09	; 9
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_wr_char+0x64>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_wr_char+0x6a>
 1ec:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 1ee:	66 e0       	ldi	r22, 0x06	; 6
 1f0:	85 e3       	ldi	r24, 0x35	; 53
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_cero(&PORTLCD,RS);
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	85 e3       	ldi	r24, 0x35	; 53
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	LCD_wait_flag();
 202:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_wait_flag>
	
}
 206:	cf 91       	pop	r28
 208:	08 95       	ret

Disassembly of section .text.LCD_wr_string:

0000032c <LCD_wr_string>:
void LCD_wr_instruction(uint8_t instruccion);
void LCD_wait_flag(void);
void LCD_init(void);
void LCD_wr_string(volatile const char *s);

void LCD_wr_string(volatile const char *s){
 32c:	cf 92       	push	r12
 32e:	df 92       	push	r13
 330:	ef 92       	push	r14
 332:	a8 2f       	mov	r26, r24
 334:	cb 01       	movw	r24, r22
	char c;
	while((c=*s++)){
 336:	04 c0       	rjmp	.+8      	; 0x340 <LCD_wr_string+0x14>
		LCD_wr_char(c);
 338:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_wr_char>
void LCD_init(void);
void LCD_wr_string(volatile const char *s);

void LCD_wr_string(volatile const char *s){
	char c;
	while((c=*s++)){
 33c:	ae 2d       	mov	r26, r14
 33e:	c6 01       	movw	r24, r12
 340:	6c 01       	movw	r12, r24
 342:	ea 2e       	mov	r14, r26
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	c2 1a       	sub	r12, r18
 348:	d2 0a       	sbc	r13, r18
 34a:	e2 0a       	sbc	r14, r18
 34c:	fc 01       	movw	r30, r24
 34e:	84 91       	lpm	r24, Z
 350:	a7 fd       	sbrc	r26, 7
 352:	80 81       	ld	r24, Z
 354:	81 11       	cpse	r24, r1
 356:	f0 cf       	rjmp	.-32     	; 0x338 <LCD_wr_string+0xc>
		LCD_wr_char(c);
	}
}
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	08 95       	ret

Disassembly of section .text.LCD_wr_instruction:

0000020a <LCD_wr_instruction>:
	saca_uno(&PORTLCD,E);
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
}

void LCD_wr_instruction(uint8_t instruccion){
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
	//saco la parte más significativa de la instrucción
	PORTLCD=instruccion>>4; //Saco el dato y le digo que escribiré un dato
 20e:	82 95       	swap	r24
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	85 bb       	out	0x15, r24	; 21
	saca_cero(&PORTLCD,RS);
 214:	64 e0       	ldi	r22, 0x04	; 4
 216:	85 e3       	ldi	r24, 0x35	; 53
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_cero(&PORTLCD,RW);
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	85 e3       	ldi	r24, 0x35	; 53
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_uno(&PORTLCD,E);
 228:	66 e0       	ldi	r22, 0x06	; 6
 22a:	85 e3       	ldi	r24, 0x35	; 53
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
 232:	83 ec       	ldi	r24, 0xC3	; 195
 234:	99 e0       	ldi	r25, 0x09	; 9
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_wr_instruction+0x2c>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_wr_instruction+0x32>
 23c:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 23e:	66 e0       	ldi	r22, 0x06	; 6
 240:	85 e3       	ldi	r24, 0x35	; 53
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	//saco la parte menos significativa de la instrucción
	PORTLCD=instruccion&0b00001111; //Saco el dato y le digo que escribiré un dato
 248:	cf 70       	andi	r28, 0x0F	; 15
 24a:	c5 bb       	out	0x15, r28	; 21
	saca_cero(&PORTLCD,RS);
 24c:	64 e0       	ldi	r22, 0x04	; 4
 24e:	85 e3       	ldi	r24, 0x35	; 53
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_cero(&PORTLCD,RW);
 256:	65 e0       	ldi	r22, 0x05	; 5
 258:	85 e3       	ldi	r24, 0x35	; 53
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	saca_uno(&PORTLCD,E);
 260:	66 e0       	ldi	r22, 0x06	; 6
 262:	85 e3       	ldi	r24, 0x35	; 53
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <saca_uno>
 26a:	83 ec       	ldi	r24, 0xC3	; 195
 26c:	99 e0       	ldi	r25, 0x09	; 9
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_wr_instruction+0x64>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_wr_instruction+0x6a>
 274:	00 00       	nop
	_delay_ms(10);
	saca_cero(&PORTLCD,E);
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	85 e3       	ldi	r24, 0x35	; 53
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 ca 01 	call	0x394	; 0x394 <saca_cero>
	LCD_wait_flag();
 280:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_wait_flag>
}
 284:	cf 91       	pop	r28
 286:	08 95       	ret

Disassembly of section .text.LCD_init:

00000288 <LCD_init>:
}

uint8_t proteus = 0;

void LCD_init(void){
	DDRLCD=(15<<0)|(1<<RS)|(1<<RW)|(1<<E); //DDRLCD=DDRLCD|(0B01111111)
 288:	8f e7       	ldi	r24, 0x7F	; 127
 28a:	84 bb       	out	0x14, r24	; 20
 28c:	85 ea       	ldi	r24, 0xA5	; 165
 28e:	9e e0       	ldi	r25, 0x0E	; 14
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_init+0x8>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_init+0xe>
 296:	00 00       	nop
	_delay_ms(15);
	LCD_wr_inst_ini(0b00000011);
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_wr_inst_ini>
 29e:	81 ee       	ldi	r24, 0xE1	; 225
 2a0:	94 e0       	ldi	r25, 0x04	; 4
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_init+0x1a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_init+0x20>
 2a8:	00 00       	nop
	_delay_ms(5);
	LCD_wr_inst_ini(0b00000011);
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_wr_inst_ini>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	91 e2       	ldi	r25, 0x21	; 33
 2b2:	9a 95       	dec	r25
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_init+0x2a>
 2b6:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000011);
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_wr_inst_ini>
 2be:	81 e2       	ldi	r24, 0x21	; 33
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_init+0x38>
 2c4:	00 00       	nop
	_delay_us(100);
	LCD_wr_inst_ini(0b00000010);
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_wr_inst_ini>
 2cc:	91 e2       	ldi	r25, 0x21	; 33
 2ce:	9a 95       	dec	r25
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_init+0x46>
 2d2:	00 00       	nop
	_delay_us(100);	
	LCD_wr_instruction(LCD_Cmd_Func2Lin); //4 Bits, número de líneas y tipo de letra
 2d4:	88 e2       	ldi	r24, 0x28	; 40
 2d6:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Off); //apaga el display
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_Clear); //limpia el display
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_ModeDnS); //Entry mode set ID S	
 2e6:	86 e0       	ldi	r24, 0x06	; 6
 2e8:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_wr_instruction>
	LCD_wr_instruction(LCD_Cmd_OnsCsB); //Enciende el display
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_wr_instruction>
 2f2:	08 95       	ret

Disassembly of section .text.main:

00000360 <main>:
	*LUGAR=*LUGAR&~(1<<BIT);
}

int main(void)
{
	proteus = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	LCD_init();
 366:	0e 94 44 01 	call	0x288	; 0x288 <LCD_init>
	// LCD_wr_instruction(0b10001111); //posición cero!
	LCD_wr_instruction(0b10000000); //posición cero!
 36a:	80 e8       	ldi	r24, 0x80	; 128
 36c:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_wr_instruction>
	// char *c = "hola";
	LCD_wr_char(0b10110110);
 370:	86 eb       	ldi	r24, 0xB6	; 182
 372:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_wr_char>
	LCD_wr_char(0b11011110);
 376:	8e ed       	ldi	r24, 0xDE	; 222
 378:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_wr_char>
	LCD_wr_char(0b11001111);
 37c:	8f ec       	ldi	r24, 0xCF	; 207
 37e:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_wr_char>
	
	// LCD_wr_string("gama");
	// LCD_wr_char('G');
	LCD_wr_instruction(0b11000000); //posición cero!
 382:	80 ec       	ldi	r24, 0xC0	; 192
 384:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_wr_instruction>
	// LCD_wr_string("hola mundo");
	LCD_wr_string("lalito");
 388:	6e ea       	ldi	r22, 0xAE	; 174
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 96 01 	call	0x32c	; 0x32c <LCD_wr_string>
 392:	ff cf       	rjmp	.-2      	; 0x392 <main+0x32>
